Transcript
Okay, that's enough about folder structures.

Let's continue working on that app and let's start working

on that next big feature, which is this interactive section

at the bottom of the website.

And let's therefore start adding some new components.

And I wanna start

by creating a new component for these tab buttons here.

And for that in the app.jsx file,

in this main area I'll add another section

after this first CoreConcepts section.

And this next section should receive an ID of examples

which again will be required for styling purposes.

And in there I'll then add a h2 tag

where I'll say examples.

And below that we can use the built-in menu element

which is a default HTML element

even though you might not have used it too often

up to this point

which can be used to create a list of buttons.

And that's exactly what I wanna have here for my tabs.

I wanna have a list of buttons.

Therefore, of course, we could add a bunch

of list items with buttons like this.

But since we have this repetition,

we could also just create a new component.

And indeed, that is what I will do here.

So I'll add a new component file next

to the CoreConcept.jsx file.

And I'll name it TapButton,jsx.

And in there I'll export

a default function called TabButton

because that should be my component name.

And in there I'll return this JSX code here,

so this list item with a button.

But now here's where things will get interesting

because it would be great if

in the app.jsx file, we could use this tab button

in this menu like this with opening and closing tags.

And between those tags, our button text, like Components,

to show the component related example.

It would be nice if we could use

our custom component like this.

And as a side note, for this TabButton component

to be available here, you of course, have to add this import

where you import this TabButton component

from your TabButton,jsx file in the Components folder.

But with that, it would be nice

if we could use it like this.

But at the moment, if I save this, you will see

that I don't get an error,

but I also don't see any buttons down here.

It's an empty field.

And I also don't see the text Components anywhere

down here, even though I have this text here.

But this text is basically ignored by React

because if I pass something between component opening

and closing text, this content is by default not output

on the page because React would not know where to output it.

I mean after all, you are telling React

that your custom component should be output on the page.

So how would React know what to do with this text here?

Well, for that we can go to this custom component

this TabButton component here.

And again, accept props in there

because every custom component will receive props.

Even if you're not setting any attributes,

React will still give you such a props object.

It will just be an object that's pretty empty,

but actually not entirely empty.

Instead there is one prop which you will always get,

the special, built-in children prop.

This is a prop that's set by React

and it's a prop that's not set with help of attributes.

So you don't set children like this.

Instead, this children prop here simply refers

to the content between your component text.

So the children prop contains whichever content you have

between your component text, and that can simply

be some text as we have it here, but it could also

be some complex JSX structure instead if needed.

But here we just need that text.

And therefore, in the custom component,

you can output that content with props.children, or again,

by using object destructuring here

and by pulling out the children property

and storing it in its own variable you could say,

so that you can use it just like this.

With that, if you save that

you now see the text Components here

and you also see that it is a button that can be clicked.

Of course it doesn't do anything at the moment when clicked,

but it is a clickable button.

And you can see that Components text here

which clearly proves that this children prop here works.

And this way of building Components

where your Components can wrap other Components

or other content is called component composition.

And this approach here is not better

than using a component like this.

Instead, it simply depends on the exact use case you have.

For the CoreConcept component,

it made sense to receive multiple attributes

that configured the different parts of this component here

because we just need different pieces

of data that should be injected

into the markup of this component here.

For the TabButton, on the other hand,

it maybe makes more sense to use this approach

because that's also how you would use a regular button

and therefore this might be

more convenient and recognizable.

We definitely could have also gone for a different approach

and maybe added a label prop like this

and we could have then used this label prop

inside of the TabButton.

We could have done this as well.

And if you save all these files

after switching to this label prop

instead you get the same result as before.

So both approaches work

and there is no better or worse approach.

Instead it comes down to personal preference,

but you of course must be aware of both approaches

because you'll see both approaches in actual projects.

And as mentioned, you might prefer this approach here

in certain situations since it might be easier to use

in certain situations or simply because

in some situations it might be closer

to the HTML code you would be writing otherwise

if you would not be using React.

Therefore here, I'll stick to this children prop

and to this composition approach,

but both approaches are valid.

And with that, we got our first button here.

Now we can of course quickly add more buttons

and also add a button for the JSX related example

for the props related example

and for the state related example,

though, of course state is a concept

about which we'll learn later.

information alert