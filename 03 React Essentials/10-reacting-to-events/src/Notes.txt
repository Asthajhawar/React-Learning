Transcript
Now with those new TabButtons added here,

the next step, of course, is to make sure

that once we click them, something happens.

And of course the ultimate goal is to then

show different content below these buttons

when they are clicked.

Now, for that, we can first of all

go to that TabButton component

because that's where we have the native button element,

the build-in button element.

And let's now start by adding a click event listener

to this button.

Now, in regular JavaScript

you would typically try to select this button,

for example with querySelector button,

and you could then add an event listener

with the addEventListener method.

And with that you could listen to the click event

for example, and then define a function, for example

such an anonymous arrow function

that should be triggered when that button is clicked.

That's how you would do it in vanilla JavaScript.

But of course here we are not in vanilla JavaScript.

Instead here we're in a React project.

And when working with React,

as you learned in the first course section,

we don't want to write imperative code like this.

Instead, we want to write declarative code.

And therefore, when working with React as a developer,

we really don't wanna start interacting

with the DOM and with the page with code like this.

Instead, we wanna let React do that.

And therefore, in React, you instead add event listeners

to elements by adding a special attribute,

a special prop to those elements.

And I'm calling it a prop here as well, because in the end

those built-in elements are also just components.

Just components, that are already provided

and understood by React, you could say.

And the special prop you want to add here

is the onClick prop.

And these built-in elements support many on-something props.

As you can see, if you just type on and you then

open this suggestion menu by pressing Ctrl + Space.

You will see many on props in there,

which in the end allow you to listen

to a broad variety of events.

Now of course, not all props here and all events make sense

for all elements and all use cases, but as you can see

there is a broad variety of events

you can listen to in theory.

And here it's the click event,

so it's the onClick prop I want to add.

You can also not just add that on a button,

but really on any element.

I could also add this onClick prop here

to the list item.

Now the value for this onClick prop here,

or actually for any event prop, is a function.

So the value you should provide here should be a function

because you want to point at the function

that should be executed when that event here occurs.

And therefore here we could add such a function

and we can define this function

inside of a component function

because that is something you are allowed to do

in JavaScript.

You can define functions inside of functions

and those inner functions will then only be callable

from inside this function,

which is absolutely fine here

because we want to use this inner function

as a value for this onClick prop here.

So here we could add a function

that could be called handleClick.

The function name, of course, is up to you,

but it is quite common to use such a name

for functions that should be triggered

when certain events occur.

So starting with handle and then the name of the event

for which this function should be triggered.

This is not a must do,

you could name this anything you want,

but this is a convention.

An alternative, which you'll also see quite a bit,

is basically this way of writing it,

where you have the event name first

and then handler thereafter.

But here I'll use handleClick.

And for the moment I'll just add a console.log statement

in there where I console.log, "Hello World!"

Now we have to use this handleClick function

as a value for the onClick prop.

And what's really important here is that handleClick,

down here in line eight, must not be executed.

You must not add these parentheses here.

Instead, you just want to use the name of the function

because you want to use the function as a value.

It is the value that's passed to the onClick prop

because this function here should not be executed by you,

which would be the case if you would add these parentheses,

but instead it should be executed by React

when a click on this button occurs,

so at some point in the future.

If you would add parentheses here,

this function would get executed

when this line of code here gets executed.

And that will be the case

when this overall component function gets executed

and when this JSX code here gets rendered to the screen.

And that's not the point of time

where this function should be executed.

Instead, it should be executed, when the button

is clicked, by React, under the hood,

and therefore we just use the function name here,

we use the function as a value, therefore,

and we pass that function as a value to onClick.

And with that, if you save that file,

if you open your developer tools

and you click on one of these buttons,

you see, "Hello World!"

And you'll see that this gets printed again and again

as you can tell by this incrementing number here

whenever you click any button.

So this is how you can listen to events,

how you can react to events in your React projects.

And this is therefore the first important step

towards our goal of making this app a bit more interactive.