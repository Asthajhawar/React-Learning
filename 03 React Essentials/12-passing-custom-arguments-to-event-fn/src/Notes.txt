Transcript
So now that we're able to, in the end,

listen to clicks on our custom button,

we now wanna replace dynamic content

with some different content

depending on which button was clicked here.

And for that, as a start,

we'll need to know which button was clicked.

So therefore, here in this handleSelect function

we might want to accept a parameter, selectedButton maybe.

And our idea here could be that selectedButton

should be a string that's either components

if the components button was clicked,

JSX if the JSX button was clicked, and so on.

So therefore here, this is components, JSX, props, or state.

These could be our four identifiers

that should be received through that parameter.

So depending on which button was clicked,

selectedButton should be one of these four values.

And then in here we could use a if check

to replace this dynamic content appropriately.

Well therefore, we'll of course have to make sure

that we do pass the appropriate identifier to handleSelect

based on which button was tapped here.

And by default, when just passing handleSelect

as a value to onSelect.

And therefore, in the end to this button here

on this onClick prop, we won't get that identifier

because that's some logic that's specific

to our application here,

and of course, React doesn't know that we want

such an identifier when that button is clicked.

What we'll have to do, therefore,

is we'll have to control how handleSelect

will be executed by React.

And we can do this by,

instead of pointing at this handle select function here.

So instead of using that as a value for onSelect

we can pass an arrow function to onSelect.

So now instead of just passing handleSelect here,

I'm passing this arrow function as a value to onSelect.

And this is of course a standard JavaScript feature

not exclusive to React.

You can create anonymous arrow functions like this

using this syntax.

Alternatively, we could also create an anonymous function

like this and execute handleSelect in there.

But this arrow function syntax is simply a bit shorter,

hence I'll go for that.

And what this code will do is it will now make sure

that this anonymous arrow function

is now actually the value that's passed as a value

to onSelect, and therefore in the end also to onClick.

And hence, we can now write code

inside of this arrow function body.

So on the right side of this arrow

that will be executed

when this anonymous function will be executed.

And therefore, here, we can

and should now execute handleSelect,

because this code will now not run immediately

when this line of code gets parsed.

Instead, when that line of code gets parsed

it's just this arrow function that will be defined

not the code inside of the arrow function

that will be executed yet.

And this arrow function is then passed as a value

to the tap button on this onSelect prop.

And therefore, when this function is executed

because the button was clicked,

it's then that this code inside of the arrow function

will get executed.

And therefore, now here we can execute

handleSelect manually and we can control

how it will be executed.

And for example,

pass this components string identifier to it.

And we can now use this code here for all these tab buttons

and pass different identifiers to handleSelect

based on which button was pressed.

And this is therefore

a very common pattern that's used in React

if you wanna define a function

that should be executed upon an event,

but you also want to control how it's going to be called

and which arguments are going to be passed to it.

And therefore, with that,

we can now go up to handleSelect

and maybe output the selected button here

so that we can see whether we get different values

for different buttons.

And if we save this, go back and open the developer tools.

If I press those different buttons

you see on the right that different values get locked

to the console here.

So this works.

And with that we now get our custom identifier,

our custom parameter, in this eventHandling function.

And with that, we now got everything we need

to now finally replace dynamic content,

this place holder here,

with the actual content that should be shown

based on which button was pressed.