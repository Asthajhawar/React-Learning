Transcript
So we can't use a regular variable

for updating the UI because the component function

doesn't execute again.

Instead, we need a way of telling React

that we want to update the UI.

And as mentioned at the end of the previous lecture

this can be achieved with another crucial React concept

called state.

This concept is all about registering variables,

you could say, that are handled by React

and that are updated with help of a function

that's provided by React,

that will also tell React that data changed

and that will therefore cause React to update the UI.

And these special variables, as you could call them,

are created with help of a special function

that must be imported from the React library.

So you must add an import statement

where you import something between curly braces from react

and that something is a function called useState.

This is a so-called React Hook.

All these functions that start with use

in React projects are React Hooks.

And the special thing about those React Hooks

is that they're technically regular functions

but they must only be called

inside of React component functions

or inside of other React Hooks.

For example, custom React Hooks

which is something you'll learn about later in the course.

But here we have a React component function,

the App component function

and therefore in there we can call useState.

And you must call those Hook functions

like this directly inside of the component function,

not nested inside of some other code.

For example not nested inside of this inner function.

This would not be allowed, you must call it

on the top level of the component function.

And these are two important rules of Hooks

you must keep in mind and you must be aware of

those React Hook functions must only be called

inside of component functions or custom Hooks,

as mentioned, but we'll take a look

at this slightly more advanced feature later.

And they must be called on the top level,

so not nested inside of some other inner functions

some if statement, a loop or anything like that.

So that's how you call Hook functions like this.

And you will learn about more built in Hook functions later

as well as how to build your own functions.

But this useState Hook here

is one of the most important Hooks offered by React

because that's the Hook that will allow us to manage

some component specific state

which is simply some data stored by React, you could say,

which when changed, will trigger this component function

to which this Hook belongs to re-execute,

to be reevaluated by React, you could say.

And that's exactly what we need here.

Now useState does accept an argument

which is basically the default value you want React to store

and you want React to use

when this component is first rendered.

And here this could be this Please click a button text

though, we'll change this later, but for the moment,

this could be our initial value.

And then useState will actually return a value

which you can store in a variable or constant,

it doesn't matter.

And that value that you will get back here

will actually be an array.

It will be an array that includes exactly two elements

and it will always be exactly two elements when

you use useState.

And therefore here we can also use array destructuring

a standard JavaScript feature

to store these two elements in two separate constants.

And you can use any names you want here

for these two elements

you're pulling out of that returned array.

And here I'll name the first element selectedTopic,

let's say, because with those buttons, when I clicked them

I am in the end selecting a topic

about which I wanna learn more.

And I'll name the second element here setSelectedTopic.

Now these names here as mentioned are up to you,

but with this way of naming these elements

I am following the common naming convention

that you will see in pretty much all React projects.

I'm naming the first element here, selectedTopic

because this first element in this array,

which we get back from useState,

will be the current data snapshot

for this component execution cycle, you could say.

So when this component function is executed first

it will be this initial value

that's stored in selectedTopic.

If it's executed again thereafter, for some reason,

it will be the updated value.

So this first element

will be the actual data we're managing.

Now I named this second element setSelectedTopic

because this second element

in this array we get back from useState

will always be a function.

A function provided by React

that can be executed to update this state,

so to update this stored value.

But in a addition to updating this stored value,

calling this special function, this second element here,

will also tell React that this component function here

must be executed again.

And that's, of course, the important part here

because that's the piece that was missing before.

Now with this UseState Hook, we have a way of telling React

that this component function must be executed again.

And that's also why we can use const here

because this constant here selectedTopic

will be recreated every time

this component function executes,

so we don't need to use a variable here.

But behind the scenes React will store and update

the actual value which will then

be passed on to this constant

when this component function executes again.

And therefore, now here in handleSelect,

we can call setSelectedTopic here,

and set this to our selectedButton value,

and down there we can now output selectedTopic.

So this state snapshot, this first element

we get back from this useState array.

This is what I'm now outputting down there

with curly braces.

In addition, I'll also console log selectedTopic here

because we'll see something interesting

if you log it here.

But with that, let's save everything and reload.

And as you can see now if I click Components

this text here, this one changed to components.

If I click JSX, it changes to jsx.

So we can now finally update the UI.

And that's of course a huge step forward

because that's the feature that was missing

to build truly interactive and dynamic user interfaces.

But I mentioned that you will see something interesting,

and for that, if I reload this page,

let's click Components or any other button again.

And what you'll see is that the UI updates,

and therefore this Component execution logs

are printed again.

They were printed first here,

and then they were printed again

because indeed the app component function was re-executed,

and since this App component

uses the TapButton component inside of it,

this TapButton component function was also executed again,

but you also see this log here.

And that was our initial state value.

And what you'll see if I clear that console

is that whenever I select a button here

whilst the UI shows the correct value

we see the old value being printed here in the console.

So the state value we had before the state was changed,

even though I am logging this here after updating the state.

And for that, it's important to understand

how React works internally.

When you call setSelectedTopic,

so when you call this state updating function here,

React in the end schedules, this state update

and it then re-executes this component function.

So therefore the updated value will only be available

after this app component function executed again.

Only then the new value is available

which is why we don't see it

if we log right after scheduling this update.

Because here we're still in the old app function, so to say.

And that's just something to keep in mind.

But with that, we now finally know how to manage state

and how to build interactive UIs.

And we can now use this knowledge

to continue working on this example

and to output more meaningful content.