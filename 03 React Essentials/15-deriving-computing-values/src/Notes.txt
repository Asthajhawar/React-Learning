Transcript
So let's now use this state feature

to output more meaningful content

than just these button identifiers here.

And for that, attached you find an updated data.js file

which now also includes this examples constant

that gets exported.

And this constant here simply holds an object

with keys that match these identifiers

that are passed upon these button clicks.

So state, props, JSX, and components.

And then for those identifiers,

we find nested JavaScript objects

which each have a title, description, and code property

which is that actual data that should be output here.

For that, for styling purposes,

I'll first of all add a div here

with an ID of tab-content.

And inside of that div, I want to have an H3 element

which should output the title.

Then below that,

a paragraph which should output the description.

And below that, a pre tag with a nested code element

which should output that code example

stored in that code property here.

So for that, we'll need to import

this examples constant here into the app.jsx file

because that's where we're managing this state.

So here, I'll import from ./data.js

and I'll import examples, this examples constant.

And now we want to dive into this examples constant

and use the data for the button that was clicked.

So for the components, JSX, props button, and so on.

And doing that is pretty simple.

Since we're storing these identifiers in our state,

we can just use this state to dynamically access the data

for these different properties.

Of course, this only works if these property names

are exactly equal to your identifiers,

so you should double check that this is the case for you.

So that these identifiers here,

which we're setting based on these button clicks,

match the identifiers in this examples object.

But with that, we can then go down here, and for example,

set the H3 element to some dynamic content

where we access this examples constant.

And then we use square brackets

to dynamically access a property

which also is some standard JavaScript syntax.

And the name of the property we want to access

will be stored in this selected topic state.

And with that, we'll access one of these objects.

And then I'm interested

in the title here in this H3 element.

So we should access .title on that nested object.

And we can repeat this approach here

for the paragraph element.

And here, it's the description property

that should be accessed.

And for the code here, it's the code property.

And with that, we're accessing different data

based on which button is selected.

Now of course, you'll note that if I reload,

I now get an error here in the console

because initially when this page first loads,

we're not selecting a valid element here.

Instead, initially, our initial state

is this please click a button text.

And this is therefore what this program tries to find

as a property name in this examples object.

And of course there is no property called

please click a button.

So this doesn't work.

And therefore to work around that, for the moment,

I'll set this initial state to components

so that this is selected initially.

With that, if I reload, the error is gone

and we see this components information here.

And if I now click JSX,

this switches to the JSX information.

And the same is the case for props and state.

So this now works and allows us to view different content

based on which button was pressed.