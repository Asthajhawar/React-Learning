Transcript
At this point in this section,

we got an application that's working absolutely fine

and we got a code base that could absolutely stay this way.

But before we'll dive into

the next project we're going to build,

there are two additional components

I want to create in this project here.

And most importantly,

there are a couple of other crucial React features

you should know about

and we'll dive into those features

as we'll build those additional components.

And I'll start here in the core concepts JSX file.

In there, we got this section element,

which then inside of it has this title

and then the actual content of that section.

In this case, this list.

And we have a similar JSX structure

in the examples JSX code.

There we also have a section with a title inside of it

and then some content inside of it.

In this case, the tab buttons and the tab content.

Now here, we could therefore build

a separate section component

that always enforces this structure

so that make sure that we always have such a title

and then some content below it.

Because as our application might grow,

we might be adding more and more sections

and chances are high

that we'll always have this kind of structure

where we have title and then some content below it,

and then probably the section element being used

to wrap that overall content.

And therefore, of course,

we could add an additional component here

in the components folder and name it section.JSX

or name the file section.JSX.

And then inside of there,

we can export a section component function, of course.

Now in here, we then could return our section element

and the h2 element inside of it.

And the title should then be set dynamically

with help of props

since it should be configurable

in the place where this section component is being used.

So therefore, we can use props destructuring here

as you learned

and expect to get a title prop, for example

so that here we can then use and output

this title prop like this.

And then of course, we can also get

the special children prop

so that we can use our section component,

our custom component here

as a wrapper around the actual section content

that should go below this title

because we can then use this children prop

to output it here below the title.

And building a component like this

then allows us to use it.

For example, in this examples JSX file.

In there, here where we import our components

and other things,

we can import this section component

from ./Section JSX.

And with that imported, we can go down here

and now replace this section here with our custom section

and also the closing tag, of course.

And with that done,

we now no longer add the h2 element like this.

Instead, now, we can set this special title prop

which we're expecting here in this section component.

And therefore, here in this examples JSX file,

we can set the title prop on section

and in this case, set it to examples.

Now if we do that and save this,

you'll notice that

the styling doesn't look correct anymore, though.

For example, these buttons are now broken.

And the reason for that of course is that

I got some styling rules in this index CSS file

where I'm looking for the examples ID.

I want that ID on an element

to then style the overall element

but also some child elements like the h2 tag or the menu.

And whilst I'm setting the ID here

on my custom section component,

I'm not using this ID prop inside of this section component.

And what's really important to understand here

and in React in general

is that when you are setting props,

so attributes, so to say,

on a custom component,

those props are not automatically forwarded

to the JSX code used inside of that component.

So, here in this case, the ID prop,

which we're setting on our custom section component

in the examples JSX file,

this prop is not automatically forwarded

and set as an attribute on this built-in section element

that we're using inside of our custom component here.

There is no magic connection like this.

Instead, React is only setting the props on the elements

where you, the developer are setting them.

There is no magic going on behind the scenes regarding that.

And therefore, here at the moment,

this ID prop, which we're setting here in examples JSX

is basically just lost, it's ignored by React.

It's not there in the rendered DOM

and that's why those styles are lost.

Now, of course, we could now try to destructure

this ID prop here

and then added like this.

That would work.

If we save that, you see the styling spec.

But when using this approach,

we would have to destructure

and manually set more and more attributes

on this built-in section element

if we want to set more elements here.

For example, if we also want to set a class name here

to add a CSS class.

We also would have to destructure that here

and then manually set it like this

on this built-in section element.

And this is not really scalable and not really convenient.

Therefore, here, we can use a pattern that could be called

forwarded props or proxy props.

Transcript
When destructuring our props like this,

we can also add some special

built-in JavaScript syntax here,

where we add three dots here

and then, thereafter, any identifier of our choice.

For example, the word props, but this is up to you.

But this three dots thing here is built into JavaScript

and basically tells JavaScript

to collect all other props

that might be received on this section component

and merge them into a props object.

So into one JavaScript object

that can then be used under the name props

in this component.

And this allows us to then forward them

here to this Section element, this built-in Section element,

by using the spread operator, which looks the same,

but we're using it in a different place here.

Here, we're using it to group some data into an object.

Here, we're using it to spread some data

onto some other element.

And here, we can then use this spread operator

on this props object or whichever name you chose here.

So these two things here are related, of course.

And this will now basically ensure that all extra props

that might be set on our custom Section component here

will be forwarded to this built-in Section element.

And this, therefore, then allows us to set the ID

and also a class name, if we want to,

and whatever else we want,

and all those props, which we're not manually extracting,

like title or children,

will, therefore, simply all be merged

into this props object

and then spread onto this Section element here.

And this can be a very useful pattern

when building wrapper components,

like this Section component here.

With that, everything looks the way it did before,

and everything also works the way it did before

if I reload this and try these buttons.

But we now got a very flexible wrapper component.

And we could have used the same pattern

also for the TabButton, for example.

Here, instead of manually getting this onSelect prop

and setting this as a value for the onClick prop

of the built-in button,

we could have also gotten rid of it.

And instead, use the same approach,

where we merge any leftover props

into this props object with this three dots operator here.

And then, here, we could simply

spread those remaining props,

like this, onto the built-in button.

And with that, we then just have to make sure

that in the place where we're using

this TabButton component,

we are now no longer setting the onSelect prop,

because that was a custom prop defined by us,

but instead, the onClick prop,

which exists on that button, that built-in button,

to which we're forwarding those leftover props.

So now, here, in Examples, in the Examples component,

we can and should replace all onSelect props with onClick

to use that same prop forwarding pattern

on this TabButton component.

And with that, if you save all files and you reload,

you'll again see that all those buttons

still work the same way they did before.

But now, again, using this special pattern,

where we forward props to some inner element

in our custom component.

