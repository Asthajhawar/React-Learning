Transcript
Now this section component here

was the first additional component I wanted to add

to this project to show you this props forwarding pattern.

Another component we could add here

would be a special tabs component

that manages this overall tabs area here.

Because if we take a closer look at our tabs system,

we can see that our tabs are basically a combination

of having a menu bar with tab buttons

and then the tab content below that menu bar.

And that content could of course also be

inside of some div

or some other HTML element if needed

or just be below that menu bar like this as it currently is.

Now again, there's nothing wrong with this setup,

especially for this basic demo app we got here.

But in bigger apps, it would not be unreasonable to assume

that we might have different places

in the app where tabs like this might be used

and therefore we might wanna have a reusable tabs component.

Hence, again here we can add a new file,

tabs.JSX, for example,

and then in there export a default function called tabs.

And here I then wanna return a fragment

where I have a menu element, so the built-in menu element

which will wrap my buttons.

And below that, the actual content

that should change

whenever a different tap button is selected.

So this will be another wrapper component

in the end that just enforces a certain JSX sent,

therefore ultimately HTML structure.

So here of course, we can use prop destructuring

to for example get our children,

this special children prop,

to set the actual content

that will be shown below our buttons.

So now back here in examples, JSX, we could try

to use this tabs component here.

And for that of course, we also must add this import

where we import tabs from tabs.JSX.

And then here we can take our tab content,

which is managed here in this examples component

and which I wanna manage here,

not inside of the tabs component,

because the idea behind this component

is that we could use it for all kinds of tabs

with all kinds of content in different places of the app.

So I don't wanna manage the content in here,

it should instead be managed in the place

where the tabs component is used.

And therefore here in the examples component,

we can select and grab this dynamic tab content

and put that between our tabs here.

But of course now I also wanna get those tab buttons

into my tabs component.

Now of course we could cut them

and add them here in the menu

but now we have the problem that I want to handle the clicks

on those tab buttons

in the component where I'm using it and also is selected

depends on data from the component

where I'm managing the overall tab related state.

And I don't have that state here

in this tabs component because as I just mentioned,

this should be a relatively dump wrapper component

which doesn't know anything about the content it's managing.

So moving the tap buttons into this tabs component

kind of adds some extra difficulties.

I now would have to accept some extra props here

where I get the selected topic.

And then also some unselect tab prop, for example,

which is triggered whenever some tab button is clicked.

But adding these extra props

does not just add some extra complexity here,

but also makes tabs less reusable

because now I couldn't use the component

in a place where I'm not managing topics

but something totally different.

So this is not a great solution.

I don't wanna accept a bunch of props here

just to make these buttons work.

Instead, what would be better

would be to leave those buttons

here in the examples JSX file, but to pass them as JSX code

to the tabs element just as we're passing

this dynamic content to tabs.

The problem here just is that we only have

one special children prop,

and we're using that for the content.

But now I need some additional prop here to get my buttons,

which should be inserted between those menu tags.

So we wanna have an additional slot for JSX code

in this tabs component you could say.

And for that, we could simply add an additional prop here

with any name of our choice, for example, buttons

and then simply output our buttons like this here.

And then in examples JSX,

where I'm using this tabs component,

we can set this buttons prop, but now we're not setting it

to some string or to some number or anything

like that, but instead to some JSX code.

And that is something you can do in React

because as I mentioned before in this course, JSX code,

JSX elements are in the end just regular values

that can be used like values in your code.

So here we can grab all those tab buttons

and cut them and use them as a value here for buttons.

The only problem we'll have with that here

is that now we got a bunch of sibling elements being used

as a value here, and that's simply not allowed with JSX.

As you learned before, whenever you are using JSX code

as a value in some place, no matter if that place

is the value being returned in a component

or a value being stored in a variable,

you have to make sure that there's only one root element

in that place.

And for that, we could add a div

as a wrapper around these tap buttons like this.

Or since we don't really need a div here,

simply this special fragment about what you learned.

And with that, we're now setting these buttons

as a special prop, which might look weird

but which is a common pattern indeed

because now with that pattern being used,

we're able to basically set two different slots

on this tabs component, the main content slot,

which is set with help of children.

And then this buttons slot,

which is set with help of our custom buttons prop.

And of course, we could accept more props

and set more slots if our component would need extra slots

for extra JSX content that should be set.

But here I only want to have my buttons and my children

and the buttons are wrapped by the menu element then.

And with that, I got that lean tabs wrapper

which enforces this structure

where we have buttons inside of a menu element.

And then below that menu, the children,

and we can now use the tabs here

in the examples component in our section

and therefore get rid of this menu element here

below the tabs and have this clean structure

and this reusable tabs component

which enforces this structure.

And as you can see if you reload the app,

everything still works as it did before.

And whilst this pattern might maybe look a bit redundant

for this basic app here, it is a crucial pattern.

And being able to set multiple slots

in Components is a crucial concept

in React about which every React developer must know.

