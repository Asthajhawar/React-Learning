Transcript
Now with that Tabs component added here,

there's one other thing I wanna do

with that component and one other concept

and pattern I wanna explore together with you.

And this extra concept is related to this menu element here

in this case.

In this Tabs component,

we might wanna wrap our buttons with a menu,

but maybe we wanna make this Tabs component

a bit more flexible.

And if it is being used in different parts

of the application, which is not the case here,

but which could be the case in bigger applications,

we might want to be able to use different wrapper elements

around our buttons

in those different places in the application.

Now, one way, of course, would be to simply get rid

of the menu here

and to then use the elements that we wanna use

as a wrapper here in the place

where we're setting the buttons.

Now, this would be one way of solving this

but a different way, which is maybe more elegant

is to keep using this wrapper element here

because this also ensures that this separation

between our buttons and the content is always enforced.

But we might want to allow the developer

to choose which wrapper element should be used

if the Tabs component is used

in different places of the application.

And for that, we could accept an additional prop

that could be named buttonsContainer.

Though the name, of course, is up to you.

But the idea here behind this prop

is to get the element that should be used

as a wrapper so that in Examples.jsx, I can go

to the Tabs component and set this buttonsContainer prop,

which I just added in my destructuring code

in the Tabs.jsx file.

And then maybe here, set this to menu

if I wanna use the menu element or ul

if I wanna use the unordered list element instead,

or div if I wanna use a div

or maybe even a custom component,

like the Section component if I would want to use this.

So I basically want to be able to use the identifier

of a component as a value for this prop,

not the component itself with those angle brackets

but just the identifier, like for example, menu.

And there is an important difference between built-in

and custom components, which you could already see here.

Custom components must be passed as a dynamic value

so to say like this.

So with curly braces, and then your function name like this.

But for built-in elements like menu,

you're not doing it like this

because that would look for a variable named menu

in your code

and try to pass the value stored in such a variable

as a value for this buttonsContainer prop.

And I don't have a variable named menu in my code here

but instead for built-in elements like menu or div,

you simply pass the identifier as a string like this here.

So that's an important difference here.

But how can we now use this buttonsContainer

that contains this component identifier

inside of the Tabs component?

Well, we could try

to simply replace the hard-coded menu element identifier

between those angle brackets here with buttonsContainer,

so with that prop name here, but this wouldn't work.

Instead, this would be looking

for a built-in element called buttonsContainer.

And I'm talking about a built-in component here

because it's starting

with a lowercase character, but of course,

there is no built-in component called buttonsContainer.

Instead, we wanna use the value that's received

on this buttonsContainer prop here as an identifier.

So what we have to do here to make sure that instead

of looking for a built-in component named buttonsContainer,

it takes a look at the value inside of this prop

and treats that as a custom component,

which should be rendered.

We have to add a special const or a variable here,

which could be named Buttons

or ButtonContainer like this, but which starts

with a capital case character, that's important.

And then here in this ButtonsContainer,

we could store this buttonsContainer.

So with that, we're basically creating a variable

or constant in this case,

which can be used as a custom component

because it starts with an uppercase character

and which can therefore be used here like this.

And now what React will do here is it will take a look

at the value stored in buttonsContainer

and that will, of course, be the value received

on this buttonsContainer prop.

And it will then either see that it's a string

and in that case, it will try to look

for a built-in component that can be identified

by that string value.

Or if we would pass in a custom component like section here,

React would also recognize that

and see that we're not trying

to output some built-in component here,

but that we're instead trying

to display some custom component here

and it would then render that component.

It would call that component function, so to say.

But in this case, I wanna stick to this string identifier.

And with that, if we save that, if I reload,

this all works snd if we inspect our tabs here,

we can also still see

that there is this menu element being used.

And we could now, on the other hand,

also replace menu here with div.

And if I save that, we don't just see

that the styling is broken

because the menu element was actually used

in some CSS rules here

but we also see that indeed, here we have a div

as a wrapper around these buttons.

And with that, we're now able

to dynamically set the wrapper that should be used

around these buttons

when we're using this Tabs component.

Here I'll go back to using a menu

but knowing about this pattern

where you essentially pass a component identifier

as a value for a prop

and you're then using this identifier inside

of a component to dynamically render different HTML elements

is another crucial concept you should be aware of.

And of course, here we could have also taken some shortcut

and instead of remapping this prop to some constant,

we could have simply accepted a prop that starts

with an uppercase character.

We then just have to make sure

that we also set this prop with an uppercase character here

in the place where we're using this component.

And with that, we would achieve the same result as before.

So now here I got the menu back, for example.

But this is a crucial pattern.

And whilst it might be confusing at first,

it's, in the end,

simply about receiving a component identifier

as a value for a prop.

And the only two important things to remember here

is that that prop then must be usable

as a custom component in the receiving component.

So the tabs component in this case.

So it must start with an uppercase character

or it must be remapped to a constant

or a variable that starts with an uppercase character.

And the other important thing is that when it comes

to these identifiers, you use string names

for the built-in elements like menu, ul or div

and you use your component functions like this here

if you wanna use a custom component.

You're not calling the function

and you're not using it with angle brackets like this.

Instead, you're just using the function name

if you wanna pass the identifier

for a custom component as a prop value.

But here it's this string identifier

because I wanna use the built-in menu component.

Transcript
Now the last concept related to components

and props, I want to cover here before we move on

to the next course project,

is the concept of default prop values.

And for that, we can go back to this Tabs component

and there to this ButtonsContainer prop

which we added in the previous lecture.

Now, as you saw there, this prop

accepts a component identifier as a value.

And whilst the idea with that prop

is to make that Tabs component highly reusable

and configurable, chances are high that in most cases

we want to use a menu element as a wrapper

around our buttons.

So it would be nice if we could use this Tabs component

without setting this ButtonsContainer prop.

And in that case, the menu element

should be used as a default.

And this can easily be achieved

when using this destructuring syntax here

by adding a equals sign after the prop we are destructuring.

And then on the right side of the equals sign

we set our default value, for example, menu here,

or div, or if we would be using our custom component,

section, like this for example.

We would have to import this section component function

into this file though.

But here it's the menu, set as a string

because it's a built-in element.

And by using this JavaScript feature

we can now use the Tabs component like this

without setting the ButtonsContainer prop.

And we'll still get this value here,

this menu identifier value,

as a component identifier in this place here.

So with that, if I save everything and reload,

this app still works as it did before

and we still have the menu element here

being used as a wrapper because that's our default.

But this Tabs component is now a bit easier to use here.