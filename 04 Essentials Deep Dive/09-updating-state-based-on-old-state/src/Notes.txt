Check video

Transcript
In React, and that's now really important.

In React, when updating your state

based on the previous value of that state,

you should not do it like this.

Instead, when updating your state based

on the previous value of that state,

you should pass a function to that state updating function.

This is a strong recommendation by the React team.

It's a best practice in the React world

and it is simply something you should memorize.

When updating your state based on the previous value

of that state, you should pass a function

to that state updating function instead

of that new state value you wanna have.

Now, why do you pass a function though?

Because this function which you pass here

will be called by React

and it will automatically get the current state value.

So the value before this state update here as an input.

So in this case here,

we could accept a parameter that could be named editing.

So this is again, true or false, just like isEditing.

But this will dynamically be set and passed

as a value by React when it calls this function

and this function, which you pass to setIsEditing

should then return the new state you wanna set.

And here we can then again use this exclamation mark trick.

Now with that, if you save that,

you'll see that it still works as before.

But of course, this code here

now looks unnecessarily complex.

What's wrong with just using this code, which also worked?

Well, the problem with this code here

is that React behind the scenes

is, in the end, scheduling those state updates

you're triggering with those state updating functions,

like setIsEditing.

So this state update here is not performed instantly.

Instead, it's scheduled

by React to be performed in the future.

Now, the future will probably be in one or two milliseconds.

So it's really fast, but it's not instant.

That's important.

Now, as a React developer, it's really important

to understand that React behaves that way

and that behavior also explains

why when you copy this state updating function

and you paste it in immediately

after the first state updating function,

you might not get the result you might expect

because here you might expect that in line seven,

we setIsEditing to the opposite of what it currently is.

And since it's false by default, this should set it to true.

And then, of course, in line eight

since we setIsEditing to true in line seven,

we might expect to set it back to false.

So with this dummy code here, which I'm adding

for demo purposes right now, you might expect

that in the end, nothing happens because we setIsEditing

to true and then immediately to false.

So clicking the button shouldn't do anything.

That would be the expectation.

But if we save this and you go back to the website,

you'll see that that's not the case.

Instead, if I click this edit button, the input does appear

and it disappears if I click save.

So I got the same behavior

as I had it without this second line

because without that, we can also open and close the input.

And that's exactly why you should use this function form

because with this code here,

React is scheduling these state updates

and both are based on the current value of isEditing,

which initially here is false.

So both these lines here, lines seven and eight are based

on isEditing being false because that's the value isEditing

has initially when this component function gets executed

for the first time.

And since this inner function, of course,

gets created as part

of the component function execution,

isEditing has that value it has initially here.

Now, calling setIsEditing with the opposite

of isEditing here does schedule a state update

that wants to setIsEditing to true but does not,

as I just mentioned, immediately change that state.

Instead, in the next line thereafter,

we still have that same old state as we had before

because we're, of course,

still in the same component function execution cycle

so to say.

So therefore, this line also does not change the state back

to false, but schedules the same update to true

and then those two schedule state updates

will be executed after each other.

Now, things will change if we use this function form

for updating the state instead.

If we do that in both cases, you will see

that now if I save this

and I click this button, nothing happens.

And that's the case now because this first scheduled update

does now automatically get the latest state value

for this editing state from React at the point

of time where this scheduled update is executed.

And here since this component just rendered,

that value will be false.

But then the update that's scheduled thereafter

will indeed also get that latest state value at the point

of time where this scheduled update is executed.

And since this second scheduled update will, of course,

be executed after the first scheduled update,

React will pass the updated state value,

which will be true in this case here

to that function when it is being executed by React.

And that's why it's considered a good practice

to use this function form here

for updating the state instead

of using this way of updating it

because when using the function form,

you simply have a guarantee by React

that you'll always be working

with the latest available state value.

So again, even though it's not needed here,

this is simply a best practice

and something you should keep in mind

if you are updating your state based

on a previous state value,

you should use this function form here

of the state updating function.

And with that, we can still open and close this input

but we're now doing it in a best practice way.