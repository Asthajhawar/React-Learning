Transcript
So now that we're able

to start editing and stop editing,

and that we got this player name inserted here,

it would now be nice if we could also edit this player name.

Because at the moment, if you try to edit it,

you'll see that it actually does not work.

And it does not work

because we are setting that value prop

on the input element.

And the special thing about that value prop

is that it sets the value that's shown in the input.

And if we try to edit this value,

we can't do that,

because this value which is set here,

basically overwrites any changes we're trying to do.

Now, one way around this problem

would be to set the special default value prop,

which just sets an initial value

instead of enforcing a value thereafter.

With that set,

you'll see that if I reload,

I still got that name here,

but now I can edit it.

So that's better,

but of course when I click Save,

it's not actually being saved.

Instead, we switch back to Player 1.

And therefore, I'll actually go back to just value here,

because I wanna use a different approach anyways.

Because we don't just wanna set the value here,

instead, we also wanna get the changes

the user tries to apply to that value

so that we can save this updated player name

somewhere in this component,

so that we can output the updated player name here

whenever it changes.

So essentially, we'll need a second piece of state here,

and that is absolutely something you can do in React.

You can use useState more than once in the same component

if you got different pieces of state you want to manage.

So here, in this case for example,

the initial value for this state could be this name,

which we're getting through the name prop,

though we might wanna rename it to initialName.

And we can use this initialName prop here

as an initial value for this state.

And then again, we can use the structuring

to get our playerName and a setPlayerName function.

As always,

these constant names here are up to you,

but they should, of course,

describe what this state is all about.

Now, with that, we wanna use this player name state here

as a dynamic value here,

and also here for this value.

And since I now have a name clash

between this constant and this variable here,

I'll simply rename this variable here

to editablePlayerName, for example,

or something like this.

And extend this editable player name,

that's all the output down there.

So now with that, we got this playerName state,

and we got this initialName prop,

and therefore in the app component,

we of course now should change the prop name here as well

to initialName for both instances of this player component.

And in the player component,

we now of course also wanna update this state.

And I wanna update this state

whenever we type into this input field.

Now, for this, we'll again need a function

that should be triggered upon some event.

And I'll name this function handleChange

because it's actually the change event

to which I wanna listen.

This is an official event

which is emitted by this input field here,

which will, in the end,

be triggered whenever the user enters a character

into this input field,

or pastes a value into this input field,

or anything like that.

And we can listen to this event

by setting the onChange prop here on this input field.

And the value for this prop

is now the handleChange function.

So this new function here.

Now, in this handleChange function,

we then wanna call setPlayerName to set that state,

to that new name that was entered by the user.

And now we just need to find out

which value was entered by the user.

And here, it's really important to understand

that onChange will trigger for every keystroke,

and it will provide us with an event object

that contains the value that was entered by the user.

So for example, the value of the key

that was hit by the user.

So here we can accept this event object

as an event parameter.

This name is up to you.

But it will be an object describing the event

that was emitted.

And we'll get this value here automatically

because we're passing a pointer

at the handleChange function

to the onChange prop on this input element.

And React will therefore call the handleChange function

when that change event occurs.

And React will give us such an event object

as an argument for this function

when it calls this function.

So we'll get this here automatically.

And this event object, of course, can be locked

so that we can take a look at it.

But it will have a target property,

which will refer to the element that did emit the event.

So to this input element here.

And this input element,

turns out to have a value property,

which will hold the value the user tried to enter

before it's then again overwritten

by the value set through that value prop.

So that's how we get access

to the value the user wanted to enter.

And we're now setting this value

as a new state for player name.

And since we're then feeding player name

back into the value prop of the input element,

that entered value will now also be reflected

in this input element.

Because we're now updating that value that's displayed

based on the value the user wanted to have.

So with all of that,

I'll get rid of the console lock

because I don't really wanna look into this event object,

but you can of course do that.

But with all of that, if we save all files and reload,

you'll see that we still get this initial value.

But if I now replace this with MAX,

this works, and that's the first new thing.

And in addition, if I click Save,

this is also saved,

because we're now managing this player name as a state.

And of course this works

for both instances of this player component.

And this is therefore an important new concept.

This is how you can get access to values

entered by a user into an input field with help of onChange,

and managing a separate piece of state,

and how you can make sure that this updated value

is then reflected back into this input field

and also in other parts of the application if needed.

By the way, this way of listening to a change on the input

and then feeding that updated value back into this input

is also called two-way binding,

because we're getting a value out of this input

and we're feeding a value back into this input.

But that's just a side note.

If you hear people talk about two-way binding,

that's what they mean.

Transcript
So now that we're able

to edit those names here,

this player functionality is finished for the moment

and we can therefore move on to the next building block,

which is the game board.

And here the goal is to output

such a typical tic-tac-toe game board.

So a three-by-three grid in the end.

And of course that should be a grid

populated with buttons that can be clicked

so that we can then also play the actual game.

Therefore, here, I'll start by adding a new component,

the GameBoard component in a GameBoard.jsx file.

And in this component, I want to output such a grid.

So therefore here, I'll output an ordered list.

Could also be an unordered list.

Not too important here,

but I guess theoretically the order matters.

And I'll give that list an ID of game-board,

again for styling reasons.

And then in there, we want to have three rows.

And then in those rows, we want to have three columns.

So a nested ordered list in every list item,

that's kind of the structure we want to have.

But I don't want to hard code this entire board,

not just because that would be annoying,

but also because eventually,

this board needs to update dynamically.

When we click on one of these squares in the board,

we want to populate it with the symbol of the player

that clicked the square after all.

So ultimately, this should be a dynamically-derived board

and that's why I'll not hard code it here.

Instead, for the moment here, we can simply add a constant

outside of the component function,

because it's not some state or anything like that,

just a constant that allows me

to outsource and store a value.

And I'll name it initialGameBoard.

And this should be an array full of arrays

because we need a grid.

So an array populated with three arrays

where every array should hold three values.

And the idea here is, in the end, to have a game board

where some squares are empty,

which could be represented by the value null,

and some squares might be populated with an X or an O,

depending on which player clicked that square,

so that we store the current state of the game

in a multi-dimensional array like this.

Now initially, of course, all these squares are empty

so it's an array full of arrays, full of nulls.

But we can now use this initial game board here

to dynamically output it

and dynamically render those grid items.

And we can again do this by using the map method,

as you learned before in this course.

Now the map method, as you learned,

takes a function as an input,

a function that will be called automatically

for every item in that array.

So in the end here for every nested array

because these three nested arrays

are the items in this outer array.

And therefore here, we'll get our row in the end, let's say,

if these are our three rows.

And for every row, we want to output a list item.

And every list item, as you learned, needs a key,

a key so that it can be identified in a unique way.

Now here we don't really have a great unique key

for these different arrays in the array

and therefore here, I'll simply use the second argument

that you can use here in this function you pass to map,

which will simply be the current index of the item

for which this function is executed.

And I'll use this index, which I here named rowIndex,

as a value for the key.

In most cases, you want to avoid using this index here,

because this is not strictly tied to this value here.

Because if this row here would swap place with the next row,

technically this row would now have the index zero,

even though this row had the index zero before.

So the index is not tied to the data

but to the position of the data.

But here in this use case, that's no problem.

Also because we're not going to swap any rows

and therefore using the index here is fine.

But now inside of that list item,

I want to have another list, another ordered list let's say,

where I want to output these values inside

of these inner arrays because we need a grid.

And at the moment, in the end,

we just have a couple of rows here.

So in this ordered list here,

we again want to output something dynamically,

and that something is that row,

because that's this inner array,

three times this inner array.

So here we want to go through the items in this inner array,

again with map, to get our columns

in the end and their index.

So to get these null values and their indexes in the end.

And then for every inner value in this inner array,

we again want to output a list item

where the key is set to colIndex.

Like this.

And in that list item, we now finally then

want to have a button that can be clicked.

And here I got a tiny error which must be fixed.

This closing parentheses belongs here.

But now here between these button tags,

I want to output either an X if this button was clicked

by the user who has the symbol X,

or an O if it was the user with the symbol O,

or nothing if the button was not clicked yet.

And therefore this will be my initial state,

that I have no value between those button tags here.

To be precise,

the dynamic value I want to output here is my col.

So this value here, which initially is null,

and if we output null,

nothing will be visible on the screen.

And here I need an extra pair of parentheses

around these two parameters for this to work.

And since col for column here is not an ideal name,

I'll rename this col parameter to playerSymbol,

also here so that it's clear

that it will be the playerSymbol

that will be shown between these button tags.

But with that,

I'm now outputting this grid here dynamically.

Of course, at the moment, there's no way of changing it.

We don't really do anything if these buttons get clicked

and we never update this game board,

but we're outputting this grid

and we can therefore now go back to the app component

and here import this GameBoard component

from ./components/GameBoard.jsx

and replace this placeholder here

with that GameBoard component,

which at the moment doesn't receive any props

and can therefore be used like this.

With that, if you save that,

you should see this grid on the screen here

and you see that we got some buttons here.

You can tell by the cursor.

But of course, clicking these buttons

doesn't do anything yet.

But we got this grid now

and we can therefore now start working on that game logic.  