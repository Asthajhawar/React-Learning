Chevk the video

Transcript
Now that we got the GameBoard component

and we're dynamically rendering this grid,

it's time to make these buttons here work

and to actually manage some state

for this gameboard so that it can change.

And so that we update the UI

and we place the symbol of the player who clicked a button

on the button that was clicked.

And therefore, here in this Gameboard component

we of course want to add some new state,

which we can do with the useState hook,

which of course must be imported from React as before.

And the goal with this state here is to manage

and update the gameboard.

Therefore, we can use this initialGameBoard

as an initial value so that our state is such an array

of nested arrays, such a multidimensional array therefore.

And all name my state constant here gameBoard

and the updating function setGameBoard.

And then we, of course, need a function

that can be triggered when this button here is pressed

where we will update the state with help

of the setGameBoard function.

So here the function could be named handleSelectSquare

or something like that.

And when this is triggered

I want to call setGameBoard and replace my gameboard

with the new gameboard where one field will change

from null to either an X or an O

depending on which player clicked this button.

So therefore here, the goal of course,

is to update the gameboard

based on the previous state of that gameboard

because of course we don't want to lose that previous state.

We don't wanna lose the information

about previously selected fields.

We just want to update one field of this array.

Hence here we should use this function form

of updating the state

by passing a function to the state updating function.

And we get our prevGameBoard as an argument here

passed in automatically by React as you learned.

And we want to return the updated gameboard.

And for this and this function body

of this inner function here, we want to replace one field

in one of these inner arrays with an X or an O.

Therefore here, handleSelectSquare

needs a couple of pieces of information.

We need to know which row index we have,

so which inner array contains the field

that should be updated, which inner array was responsible

for rendering this button,

and of course then we need to know which exact field

was clicked, so which null should be replaced

with an X or an O.

And for that here we can get the callIndex.

So that we got row and column.

And then of course we also need to know

which symbol should be placed there, an X or an O,

though that, of course, will simply depend

on whose player's turn it is.

And we'll therefore take care about that a little bit later

since we'll need to add some extra logic for that.

So for the moment we'll simply use an X

for the field identified by these two indexes.

And therefore now we could take this prevGameBoard array

and select one of these inner arrays

with help of the rowIndex.

And then one of the elements inside of that inner array,

so one of these nulls here with help of the callIndex.

That's how we can get hold

of one of these elements in our nested array here.

And then we might want to overwrite this with an X

and then return this updated state here as our new state.

Now we could do this, but I'm saying could

because this approach is not recommended.

Instead, just as you should use

this state updating function when updating your state

based on some previous state,

it's also strongly recommended that if your state

is an object or array, you update that state

in an immutable way, which simply means you create a copy

of the old state, so a new object or a new array first,

and you then just change that copy instead

of that existing object or array.

And the reason for that recommendation

is that if your state is an object or array

you are dealing with a reference value in JavaScript.

And therefore if you would be updating it like this

you would be updating the old value in-memory immediately,

even before this scheduled state update

was executed by React.