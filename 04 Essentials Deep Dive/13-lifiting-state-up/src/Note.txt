Transcript
So now that we have this basic game board,

it's time to make sure that we actually switch

between these two players

so that they take different turns

and that we place the symbol of the player

who's currently active on a button

when the button is pressed.

And in addition, it would also be nice

if the active player would be highlighted,

for example by placing a border

around the player name up here.

Now I did actually already prepare some CSS styles for that.

There is a highlight-player CSS class

that can be added to this ordered list

that has the player's id.

And if that class is added here,

the active player is highlighted.

And the active player is highlighted

with help of another CSS class, the active class,

that should be placed on the list item

of the player that is currently active.

And this has one important implication.

It means that we need to know

about the currently active player

in both this Player component

and in the GameBoard component

because here we need the symbol of the active player.

And here in the Player component,

we want to add a CSS class to this list item dynamically.

And that's of course a problem

because these are two separate components.

How can we make sure

that they both have access to the information

which player is currently active.

Well, in cases like this, which are super common,

we need to do something which is called,

lifting the state up.

Instead of managing the information

which player is currently active in the GameBoard

or the Player component,

which would not be enough for the reasons mentioned,

we need to manage the state

in the closest ancestor component

that has access to both components

that need that information.

So in this case, the App component.

Because the App component can then pass the information

which player is currently active

to both the Player and the GameBoard components via props.

So therefore, we should add some state here with useState

in the App component and manage the active player here.

Now here we could start by making sure

that the player with the symbol X

is the active player initially,

and we can add a setActivePlayer state updating function

to then change that active player state.

Now we need a function

that should be executed whenever we wanna switch turns

and therefore we could name it handleSelectSquare

because in the end, it is after selecting a square

in our grid that we wanna change turns.

And in that function,

we wanna update the active player state

by calling setActivePlayer.

And we wanna check if it's currently an X,

we wanna change it to O.

If it's an O, we want to change it to X

and therefore the new state depends on the old state

and therefore just as before,

we should pass this function here to setActivePlayer

and we get the currently active player

as an input automatically as you learned.

And then here we could check with a turnery expression

if the currently active player is the player

with the symbol X,

in which case we want to set the new state to an O.

And otherwise if it is an O, we wanna set it to an X.

Now we just also need to make sure

that handleSelectSquare gets executed

when a square was selected.

And of course, squares do get selected here

in our GameBoard component.

Therefore, in there it makes sense to accept some props

and use props destructuring here

to get a prop that could be named onSelectSquare

or something like this.

The name, of course, is up to you

because it's your component.

And I wanna call this function

from inside handleSelectSquare

because this function is triggered

if a square was selected by clicking this button.

And here we then wanna call onSelectSquare

so that in the end we're executing a function

that's defined outside of this GameBoard component

from inside this GameBoard component

because the value for this onSelectSquare prop,

of course should be a function

and we're executing this function here.

But the function that will be executed is now defined

in the App component

because there,

it's this handleSelectSquare function we added

just a couple of minutes ago.

So this should be the value

that's set for this newly added onSelectSquare prop

like this.

And with that, this code here should execute

whenever one of these buttons is pressed

because we make sure

that we execute this handleSelectSquare function

from inside the GameBoard component.

And with that, we're switching the active player

and we can now therefore do two important things.

First, we can add a class name here to this ordered list

and add this highlight-players

or highlight-player as it's called CSS class here

to this ordered list.

And then we wanna pass the information

whether it's this or this player that's currently active

to this Player component.

So that in there, we get this information,

let's say through an isActive prop

that we can add and destructure here

in the Player component.

And we can use this as active prop now here

to add a class name dynamically to this list item

by checking if isActive is true.

And if that's the case,

we want to add the active class, otherwise it's undefined

because otherwise I don't want to add any class.

So with that, we're adding this active class conditionally

to this list item.

And back in the App component,

we now just have

to add this newly accepted isActive prop here

to the Player component.

And here for this first usage of the player component,

this player is active

if the activePlayer,

so this state here which we're managing here,

is equal to an X

because this here is the component

for the player with the symbol X.

For the second usage of the Player component,

we're looking for an O.

So with that we're using this active player state

which we're getting here

and which we're updating here

to dynamically highlight which player is currently active.

And we also need to pass this activePlayer to the GameBoard

because activePlayer in the end is the symbol

of the player that's currently active,

and that symbol is exactly what we need

in the GameBoard

to place it on the square that was clicked.

So here in the GameBoard component,

we should get the activePlayerSymbol prop,

or something like that,

and then use that prop here in this place

where I'm currently always using an X

to update the GameBoard

and therefore ultimately the button that was clicked.

Of course, now the activePlayerSymbol prop must be set here

on the GameBoard component

by adding it activePlayerSymbol.

And we should set this to the activePlayer state

because as mentioned,

that is simply the symbol of the player.

So we want to pass activePlayer

as a value to activePlayerSymbol.

And with all those changes made,

if we save this, we should be able to see

that the active player is highlighted

with this nice border and animation we got here.

And if I click here, I got an X,

but now you see that the highlighting switched

and if I now click here, I place an O

and we can go back and forth here.

And of course we're not done, we still can't win

if we would try to do that

and we can also click the same button multiple times,

which is also not the idea, but it's a huge step forward.

And most importantly, you now learned

about this concept of lifting the state up,

which is an extremely important concept in React

because this is something you'll have to do a lot

when building React apps.