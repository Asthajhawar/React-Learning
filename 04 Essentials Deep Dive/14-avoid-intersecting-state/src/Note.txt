Transcript
Now before we'll start working

on that winning condition

or making sure that the same button

can't be clicked multiple times

I wanna work on that log that should be shown

below this game board,

because working on that will also allow us

to improve the code of this application

and the structure of the application.

Because whilst everything might look great right now,

we're actually on the edge of writing suboptimal React code,

especially if we plan to add more features.

Now to show you what's suboptimal,

let's add a new log component

because we'll need that component anyways.

So I'll add a new log JSX file

and in there I'll log component function

which of course is exported.

And the idea behind this log component here

is in the end that it's simply outputs an ordered list

with an ID of log for styling reasons

where we output information about the different turns

we had in our game thus far

so that we can simply see which turns

were taken by the different players

whilst playing that game.

And that of course means that we need to manage

some dynamic array of turns here.

An array that grows with every button click.

And that of course means that we can't really manage

that state here because that information,

which button was clicked,

is generated here in the game board component.

So we again, need to lift state up to the app component

because that's the component that has access

to both the game board and the log component

which I wanna use here.

And for that of course, we should also import

log from dot slash Components log JSX.

So we need to lift state up,

and therefore here we can use "useState"

to manage an array of turn data.

And here we could then have our game turns

and a set game turns function.

And now whenever a square was selected,

we wanna add a new turn to this array.

Now conveniently,

we got this handle select square function here,

so therefore in there we can call "setGameTurns."

And now we just need some information

about the turn that took place.

But before we make sure that this information gets here

let's pause for a second.

Does this approach make sense?

Because after all, we also got another place

where we're storing information about the turns

that already took place, at least in some way.

And that's the game board component.

Here we are updating our game board

and we do that for every click on a button.

So of course with that game board, we are in the end

reflecting the different turns that took place.

We just don't know in which order they were clicked

but we know that this button was clicked,

and this button was clicked,

and we know which player clicked which button.

So we already got a lot of information

stored in this state here.

And adding a new state to store kind of the same information

just with a little bit of extra data

is something you typically wanna avoid as a React developer.

And that will not always be easy

and will also require some practice.

And it's also not the end of the world

if you start managing the same data with multiple states

but it is something you typically wanna avoid

and therefore we are going to avoid it here.

So instead of adding this state

and having this game board state here,

it makes more sense to lift that state

that manages the current information

about the progress of our game

up from the game board component to the app component.

Because again, it's this app component

that then has access to both the log,

which needs this information,

and to the game board component which also needs information

about the current state of the game.

It is however, now not the game board state

that I wanna lift up

because that state is missing information

about the order in which these buttons were clicked

which is important information for the lock.

And I'll therefore comment out this game board state here.

We could also delete it,

but I'll keep it here for reference.

And I'll instead switch to this game turns state here.

Because as you will see, we can manage this information

about these different button clicks as a list

and then derive both the information we need for the log

as well as the information we need for the game board

from such an array of game turns.