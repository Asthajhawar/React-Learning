Transcript
So let's now make sure

that we can't click the same button multiple times

because that's really not helpful.

It also makes our log explode.

And of course, it's not really how this game should work.

Now, how can we make sure

that the same button can't be clicked multiple times?

Well, we can simply go to the GameBoard component

and in there, it would make sense

to disable the button once it has been selected.

So here on this button component,

we can add the disabled prop because that is supported

on the built-in button component, just as the button element

in HTML has a disabled attribute which you can set.

And if we would just add it like this,

it would automatically be set to true

and the button would be disabled.

And as a result, if we save that and reload,

no button can be clicked.

Nothing happens if I try that,

but, of course, now I wanna set this dynamically.

I wanna set it to true if this button was already selected

by a player and set it to false otherwise

if it should still be enabled.

So what could be our condition here to derive

whether this should be disabled or not dynamically?

Well, in the end, it's this player symbol.

If player symbol is an X or O

that means that this button has already been clicked

and that it should be disabled.

If it's null, on the other hand,

we know that it's still enabled.

So we can simply check

if player symbol is not equal to null.

Because if it is not equal to null, we know

that it's either an X or an O

so that it has been picked already.

And therefore this will yield true

if this button has been selected already.

And the button will therefore then be disabled

if that's the case.

If player symbol is equal to null,

so if this condition here is not met,

this will yield false and the button will not be disabled.

And with that, if I reload,

you see I can click this button, I can click this button

but if I click this button again,

you see now the highlighted player does not change.

The log also does not change

if I click the same button multiple times.

And therefore now we're making sure

that every button can only be clicked once.

Transcript
So now we've got these winning combinations.

Now, we need to add the code

to dynamically check on every turn

whether one of those combinations is met.

Now, to check all these winning combinations on every turn

we could add some logic here in handleSelectSquare

because this function, of course, will be triggered

whenever a square is selected.

And that might be the first thing you want to do.

We could then add a state

where we manage the information

whether we have a winner or not,

and we could name it hasWinner and setHasWinner,

and initially that's false.

And then here in handleSelectSquare

we check whether one of our winning combinations is active.

And if that's the case we set hasWinner to true

otherwise we set it to false.

We could do that, but again, we don't need to.

This is some redundant state

because we can derive the information

whether we have a winner or not from gameTurns,

and we don't need

to check for a winner in handleSelectSquare

because this app component function

will also execute after every turn.

After all, we are updating the gameTurns array

whenever a square was selected.

And therefore, of course, as you learned,

this app component function

will re-execute after every turn.

Again, that's how you should think about data

and state in React,

and that's also simply something that will take practice,

and exercise, and experience,

but that's why we're starting with this way of thinking

in this course.

So, therefore, we want to derive

whether we have a winner or not from our gameTurns.

Now, to derive this, here, in our component function,

we can start by simply going through all our combinations,

our winning combinations,

whenever this app component re renders.

So here we want to check all winning combinations

after every turn.

And since we only have a couple of combinations here,

not very much,

that will be super fast

and will happen pretty much instantly.

And to check the winning combination

inside of that for loop,

we can start by getting the symbol in the first square

because, keep in mind, every combination

is a combination of three squares

where every square is identified by row and column,

as I named it here.

So what I wanna do here is,

in the end I wanna have a look at my game board,

which is stored in a different component,

but I'll get back to this in a second.

And I wanna have a look at one of these inner elements

in these nested arrays

and take a look at the symbol we got there.

Or to be precise,

I wanna store the symbol we got at a specific position

in this constant here.

And I then plan on repeating this for the second square

and the third square of this possible winning combination

so that I simply extract the symbol I have on my gameBoard

for the different elements

that make up one winning combination.

The problem of course,

is that the gameBoard is inside of the gameBoard component,

and now I need it in the app component.

The solution is to simply move the code.

This code and the gameBoard component

where we compute the gameBoard

can be cut from there

and can be added to the app component,

maybe hereafter deriving the active player.

Of course, we now also need to cut the initial gameBoard

and move that outside of the app component

maybe here or maybe right below the imports.

This is up to you.

So that now we're deriving the game board

in the app component,

and turns is now simply gameTurns.

This gameTurns state we got here.

That's what we're now using down here.

Now, of course, we need the gameBoard

and the gameBoard component,

and therefore on this gameBoard component,

I'll now set a board prop which gets this gameBoard

which I'm now deriving here in the app component as a value.

And in the gameBoard component,

it's there for now, the board prop

instead of the turns prop which I'm getting.

And it's this board prop that we can use down there.

So with that, this gameBoard component

simply got a bit leaner

and it's no longer computing that value

inside of this component.

But of course, we're still computing the value

just in a different component now, in the app component.

But the advantage of doing it here

is now that now we have that gameBoard here

and we can now extract the different symbols

that are stored in that game board,

in the positions that are defined

by our winning combinations.