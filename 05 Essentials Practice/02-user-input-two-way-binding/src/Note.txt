/*

So this special React hook which we can use to register and manage some state in a component. And then we can call this useState hook here in this component function.

I'll have my annualInvestment,which could be $1,200.
I'll have my expectedReturn, which could be let's say 6%.
And I'll add a duration property with a default duration of 10.

*/

/*

"HandleChange." And in this function, I expect to get the new value that was entered for a given input.
But I also expect to get the inputIdentifier.
So I expect to get these two parameters here

In this function so that inside of this handleChange function, we can call setUserInput.
And then I wanna update this state based on the previous state value because when this handle change function executes, only one of these four properties will be updated. And of course the other properties and their values shouldn't be lost.

Therefore, the updated state must depend on the old state so that we still have the old data for the inputs that were not changed.

We should use this function form for updating the state where we get the previous userInput and where we then return our updated state object.

*/


/*

And I'll start by spreading the old userInput state object into this new object so that we copy all the old values into this new object.

And I then just override one single property of that object. And that property should be identified with help of that inputIdentifier parameter here. So the expectation here is that inputIdentifier will get a string as a value that either is initialInvestment, or annualInvestment, or expectedReturn,or duration so that we can use this JavaScript syntax to dynamically set a property depending on which value is stored in inputIdentifier.

And I want to set that property of that name that's stored in this parameter to this new value which we're also getting as a parameter.

*/

/*

We can add the onChange prop to add a listener to the change event to this input field.

And you can then define which function should get executed when that change event occurs. Now just pointing at handle change like this, so at this handle change function here won't work though because by default when the change event occurs,

React will call this function and pass the event object to it.

A default event object that is automatically generated by React.

But whilst this event object will contain useful data, it will not hold the inputIdentifier and it will also just be one parameter instead of two, which we're expecting here.


By applying anonymous function here, which is then the actual function that's passed as a value to onChange. And that will be executed by React eventually

once the change event occurs and inside of this function we therefore then have full control over how handle change will eventually be executed.


Because it is this anonymous function that is passed as a value to onChange, and that will be called by React, therefore. it will get this event object and it has a target property which will refer to this input. 

*/


/*

And we can do that with help of the value prop. This prop can be used to set the value that will be displayed on the screen for this input field.

*/
