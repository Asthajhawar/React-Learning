Transcript
So now that we're gathering

and storing user input, it's time to use that input

with that utility function

you find in the investment.js file,

this calculateInvestmentResults function,

to calculate the results we want to show

in that table in the end.

Now therefore, of course,

we have to answer the question, where this function

should be used, where should those results be calculated?

Where do we need them?

And of course, we could calculate those results

in the userInput component.

There we got this userInput object, which conveniently

and not by accident has exactly the shape we need

as an input for this calculateInvestmentResults function

because there we also expect to get an object

as an input which has these four properties,

which are the four properties I have here.

Though if you went for individual state slices,

you can of course also simply combine them

into such an object by deriving this object

based on your state slices.

But either way, we could therefore use this function here

in the userInput component and calculate our results here.

But do we need those results in this component?

The answer to this question, probably, is no

because even though we don't have it yet,

I do of course plan to add a separate component

for outputting that results table.

And that table should then be shown

below the userInput component.

So therefore, since I plan to output the results here

in a dedicated component we'll need to get our user input

from the userInput component to the App component,

so that in here we can calculate those results

and pass those results to the Results component.

Or pass the user input to the Results component

and calculate the results in there.

And that's therefore indeed what I will do here.

I'll add a new component, Results.jsx is my file,

and in there I'll have this function component

which I'll name Results.

And my goal is to get the user input

as an input in this component here,

so as props in this Results component.

So that in this Results component I can calculate

that results data and output that results table.

For the moment I'll just return a placeholder here, Results,

which will be replaced later.

And I'll start by getting the user input

from the userInput component to the App component,

so that then we can pass it back down

to the Results component which we will soon use here.

And therefore what we can do here

is we can simply lift this state up

from the userInput component to the App component.

We can cut this state here

and add it in the App component function like this

and then import useState in this file,

since we're now using this function here

in this App component file,

and we'll, of course, also need to lift

this handleChange function up.

So cut it from userInput component

and move it into the App component.

And now with that, we should add a new prop

to the userInput component

so that we can call this handleChange function

from inside the userInput component.

So we need to pass a pointer to this handleChange function

as a value to the userInput component.

And hence I'll add a prop here

which I'll name onChange or onChangeInput,

the name is up to you because it's your component.

Here I'll go for a onChange

and I'll point at handleChange here.

So that this function is passed as a value to userInput.

And as you learned you don't call the function here,

you don't add parentheses,

instead you just use it as a value.

And with that, in the userInput component

we can accept this prop and destructure it here,

the onChange prop which I just added,

and get rid of this import

since we're not managing state in here anymore.

And now this onChange prop here will hold a function

because we're passing a function as a value to onChange.

And hence we can call onChange as a function in here.

And therefore in this anonymous function here,

where we previously called handleChange,

I'll now call onChange,

which is the same function in the end,

now just received through a prop.

And I'll do this for all those inputs,

calling onChange to, in the end, pass this data

to the App component and there to the handleChange function.

But, of course, in the userInput component,

we also need that user input.

We need that userInput object to update the values

of these input fields.

And therefore, of course, we should also accept

a second prop here, maybe named userInput

so that we don't have to make any changes down there

in the JSX code.

And this should now be a prop that should get

this userInput object as a value.

Therefore, back in the App component

we now also must set this userInput prop

on the userInput component

and set this equal to this userInput state here

so that it's this object that's passed as a value

for that userInput prop to the userInput component.

And I know that's a lot of userInputs,

we could of course all choose a different name here

for the prop and also for the state if you wanted to,

you can rename all these things.

But with that, we now lifted this userInput state here,

up from the userInput component to the App component.

And we're doing this so that we can

now also pass this user input to the Results component

so that in there we also get a prop,

and here I'm again using prop destructuring to store it

at prop in a separate variable,

and here we can also name it userInput,

or just input to mix things up.

And then in here for the moment

I'll just console.log input.

And with that, back in the App component,

below the userInput component,

I now do want to output that Results component.

And for that, of course, you must import Results

from this Results.jsx file.

And then on this Results component

we should set this input prop, which I just added kind of

to this Results component function

and set this equal to this userInput state,

the same userInput state where we're also passing

to the userInput component, so that we're sharing this state

with two different components in the end,

two different components that both need that state.

Well and with that, if you save all your files in the app

you'll see this results text down there,

which at the moment is just a placeholder of course.

But more importantly, if you open the developer tools

you'll see an object being logged here

which is, in the end, that userInput state object.

And therefore, of course, also if I clear this

and I changed the input here, you see that this gets updated

and we get the updated object being logged here

with that updated annual investment amount

of 1500 in this case.

So passing that user input to the Results component works.

And with that, we can now derive the results data

in that Results component.