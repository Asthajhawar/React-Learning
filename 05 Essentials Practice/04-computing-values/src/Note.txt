Transcript
So let's now derive the results data.

And for that, of course

I'll use this calculate investment results function,

which I'm providing to you in that investment.js file.

Therefore, in here in Results.jsx,

we can in the end derive our results

from that input prop here,

which in the end of course is that user input state.

So we can derive our results from that state.

And as you learned before,

deriving values, computing values

based on state is something you'll do a lot in React.

Therefore, here in the results component,

I'll use this calculate investment results function,

which must be imported from the UTIL folder

and DRD investment.js file like this.

And to calculate investment results

we should pass our input here

because that input will be an object

at least here in my app that has this shape

I'm expecting here.

If you are managing your state differently,

or if you use different property names

in your user input state,

you of course first must transform your input object,

or create a new user input object

that then has this shape here.

But here in my case, this user input state

which I'm managing in the app component

already has the right shape,

and therefore I can just pass this prop value like this

to calculate investment results.

And with that, I'll get my results data here,

and for the moment I'll just console.log this results data

in this component so that we can take a look

at those results.

And if I save that and I open the console and I reload,

in the developer tools

I get an array with 10 elements starting at the index zero.

And as you can see, these 10 elements

are for the 10 different years.

And then in there you can see that for every year

I have the amount invested in that year,

which of course is the same for every year

since it's simply this amount here.

But I then also got the interest earned in a given year,

which is different for those different years.

And then also the value of my investment

at the end of the year,

which is simply my initial investment,

plus any annual investments, plus that interest earned.

And of course also the interest earned in earlier years.

So that's my investment data.

And if I clear this and I, for example

change the initial investment,

you see that this gets recalculated,

but you now also see that I seem to have a strange error

in there.

The interest amount looks pretty wrong

and the value at the end of the year does as well.

And then from a certain point on

I'm getting not a number as an interest value.

What's the problem here?

Well, the problem here is that in JavaScript

when you're getting the value of an input field,

like here for this initial investment input field,

but really for any input field,

that value when extracted as we're doing it here

will always be a string.

Even if you set the type here to number

this does not influence the type of value

you're getting in JavaScript.

Instead, you will always get a value of type string.

And that is the problem here

in our calculate investment results function,

because in there I'm then in the end

performing mathematical calculations with strings.

And when using the plus operator in a calculation

and one of those values is a string,

JavaScript will not use the plus operator

to add two numbers,

but instead it will concatenate

to two values as a new string.

Which leads to these super long numbers here,

which in the end are not numbers

but simply concatenated strings.

And you can see this here in year one, in the first year.

Here, in the end that's simply the number 15,000,

which is my initial investment

combined with the number 2,100,

which is my annual investment and this interest earned here.

So these in the end are two numbers, not treated as numbers,

but instead concatenated as a string.

And that's the problem here.

That's the bug in this application.

And to fix this error,

we should go back to the app component

where we are storing the values entered by the user

and we should simply add a plus in front of new value.

Because simply adding this plus here

will force a conversion of this string value

to a number value.

And with this simple fix added here

if you now reload and you change that investment here,

you'll see that this bug is gone

and we now instead do get proper numbers here.

And with that, we now therefore get our results

in this results component

and we can as a next step

output these results in a table.