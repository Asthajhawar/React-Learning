Transcript
So, in this almost finished app here,

we got this input area,

and then we got this results table down here.

But this app still has some flaws.

Most importantly, if I enter a negative duration,

in that case my app crashes with an error message.

Or if I change the duration to zero,

then the same thing happens.

We also can enter a negative investment amount,

though here you could argue

that this allows you to calculate how liabilities change

over the years.

So, that maybe is acceptable.

But the app definitely should

not crash if we enter zero here.

Instead, it would be nicer if we would output

some error message here below the input area,

hence allowing the user to easily change their input again.

And therefore, back here in the code,

we want to make sure that this results component

is output conditionally.

To be precise, it should only be output

if we have valid user input.

And of course, in this app component,

we can therefore simply add a new constant

or variable where we derive the information

whether the input is valid,

or not based on this user input state.

And I'll do this here, right below this state,

to keep those related values together,

even though technically you could of course add it

anywhere in this app component.

But here I'll add a new constant,

which I'll name inputIsValid,

which sounds like a descriptive name to me.

And this should be true or false depending

on whether the user input is valid or not.

Now as I just explained, this input here should be valid

if the duration is at least 1.

It should not be 0 and it should not be negative.

For all the other values here,

I can live with negative values since

you could simply calculate different things with that,

but for the duration, I need to enforce a positive value.

And of course, you could also edit this app

and its code to also enforce positive values

for those other inputs if you wanted to.

But here I'll simply check the duration

and therefore inputIsValid should be true

if userInput.duration is greater or equal than 1.

That's my condition here.

And if this condition should not be met,

inputIsValid will be false.

And therefore, now we can use inputIsValid

to conditionally render results.

By simply adding inputIsValid here

and then using either a ternary expression,

or simply this double ampersand shortcut here

to conditionally render this results component.

And I also want to show a fallback message

if the input should not be valid.

So, here we can check if not input is valid,

and in that case I want to output a paragraph

where I simply say, please enter valid input data.

Or maybe, to be more specific,

please enter a duration greater than 0.

And I'll give this paragraph a class name of center,

since this is a class, I defined in the index CSS file

that will make sure that this looks nice.

And with that if I reload,

I still see my table and I will see my table

as I change those inputs,

and you see that the table dynamically recalculates

as I change those inputs but if I change the duration to 1,

it also still works, but if I change it to 0,

you see it breaks,

and if I change it to a negative value,

it also breaks and I see this error message.

But if I go back to a positive number again,

this all works again.

And that's now the finished app.